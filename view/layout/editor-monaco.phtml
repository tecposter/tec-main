<?php
$localeKey = $this->getLocaleKey();

$pageConfig = $this->pageConfig ? $this->pageConfig : [];
$pageConfig = array_merge($pageConfig, [
    'localeKey' => $localeKey,
    'now' => micro_date()
]);

$isDebug = $this->config->bool('debug');
$cssUrl = $isDebug ? $this->staticUrl('/ui/dev/css/main.css') : $this->staticUrl('/ui/dist/css/main.css');
$jsUrl = $isDebug ? $this->staticUrl('/main/dev/js/main.js') : $this->staticUrl('/main/dist/js/main.js');
?><!DOCTYPE html>
<html lang="<?php echo $localeKey; ?>" prefix="og: http://ogp.me/ns#">
<head>
<?php echo $this->insert('html/meta', ['localeKey', $localeKey]); ?>
<link rel="stylesheet" href="<?php echo $cssUrl; ?>" />
<link rel="stylesheet" href="//at.alicdn.com/t/font_227141_j0ksjtdew7r.css" />

<meta http-equiv="X-UA-Compatible" content="IE=edge" />
<meta http-equiv="Content-Type" content="text/html;charset=utf-8" >
<link rel="stylesheet" data-name="vs/editor/editor.main" href="https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.14.3/min/vs/editor/editor.main.css">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.12.0/styles/default.min.css">

<style type='text/css'>
html, body, .page {
    height: 100%;
}
</style>

<?php $this->section('head'); ?><?php $this->stop(); ?>
</head>

<body>

<div class="page <?php echo $this->route->getName(); ?>">


<div class="editor-wrap">
    <div class="item editor-section">
        <div class="editor" id="monaco-editor"></div>
    </div>
    <div class="item preview-sectoin">
        <div class="preview" id="editor-preview"></div>
    </div>
</div><!-- .editor-wrap -->

<?php echo $this->section('float'); ?><?php $this->stop(); ?>

</div><!-- .page -->

<script type="text/javascript">
window.PageConfig=<?php echo json_encode($pageConfig); ?>;
</script>

<script src="https://cdnjs.cloudflare.com/ajax/libs/markdown-it/8.4.2/markdown-it.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.12.0/highlight.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.4.0/languages/go.min.js"></script>
<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-MML-AM_CHTML"></script>

<script>var require = { paths: { 'vs': 'https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.14.3/min/vs' } };</script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.14.3/min/vs/loader.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.14.3/min/vs/editor/editor.main.nls.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.14.3/min/vs/editor/editor.main.js"></script>


<script>
(() => {
let blockChanging = false;
let contentChanged = false;

const defaultContent = [
    '# TecPoster Markdown Editor'
].join('\n');

const codeEditor = monaco.editor.create(document.getElementById('monaco-editor'), {
    value: defaultContent,
    language: 'markdown',
    wordWrap: 'wordWrapColumn',
    wordWrapColumn: 84,
    wordWrapMinified: true,
    wrappingIndent: "same"
});

const mdit = window.markdownit({
    highlight: (str, lang) => {
        if (lang && hljs.getLanguage(lang)) {
            try {
                return '<pre class="hljs"><code>' +
                    hljs.highlight(lang, str, true).value +
                    '</code></pre>';
            } catch (__) {}
        }
        return '<pre class="hljs"><code>' + mdit.utils.escapeHtml(str) + '</code></pre>';
    }
});

// https://docs.mathjax.org/en/latest/start.html
MathJax.Hub.Config({
    jax: ["input/TeX","output/HTML-CSS"],
    tex2jax: {
        inlineMath: [['\\(','\\)']],
        processEscapes: true
    },
    skipStartupTypeset: true,
    displayAlign: "left"
});

const previewElem = document.getElementById('editor-preview');
const previewWrap = previewElem.parentElement;
const updatePreview = (val) => {
    previewElem.innerHTML = mdit.render(val);
    MathJax.Hub.Queue(["Typeset", MathJax.Hub, previewElem]);
};
/*
const updatePageTitle = val => {
    document.title = extractTitle(val);
};
 */
const extractTitle = val => {
    const matched = /# ([^#\n]+)/.exec(val);
    if (matched) {
        return matched[1];
    }
    return '';
};

//updatePreview(defaultContent);
//updatePageTitle(defaultContent);

codeEditor.onDidChangeModelContent(() => {
    const codeContent = codeEditor.getValue();
    updatePreview(codeContent);
    if (!blockChanging) {
        contentChanged = true;
    }
    document.title = (contentChanged ? '* ' : '') + extractTitle(codeContent);
});

codeEditor.onDidScrollChange((evt) => {
    if (!evt.scrollTopChanged) {
        return;
    }

    const lineCount = codeEditor.viewModel.lines.lines.length;
    const visibleRange = codeEditor.getVisibleRanges()[0];

    const srcMax = lineCount - (visibleRange.endLineNumber - visibleRange.startLineNumber);
    previewWrap.scrollTop = (previewWrap.scrollHeight - previewWrap.offsetHeight) * visibleRange.startLineNumber / srcMax;
});

window.onbeforeunload = (evt) => {
    if (!contentChanged) {
        return;
    }

    evt.stop();
    evt.cancel();
    /*
    const confirmationMessage = "Warning: Leaving this page will result in any unsaved data being lost. Are you sure you wish to continue?";
    (evt || window.event).returnValue = confirmationMessage; //Gecko + IE
    return confirmationMessage; //Webkit, Safari, Chrome etc.
     */
    (evt || window.event).returnValue = null;
    return null;
};

window.codeEditor = codeEditor;
window.updateSavedContent = (content) => {
    blockChanging = true;
    contentChanged = false;
    codeEditor.setValue(content);
    blockChanging = false;
};

})();
</script>

<?php $this->section('script'); ?><?php $this->stop(); ?>
<script type="text/javascript" src="<?php echo $jsUrl; ?>"></script>
</body>

</html>
